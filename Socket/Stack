#include <stdio.h>
#include <Windows.h>
#define EMPTY 0

struct node
{
	short x;
	short y;
	struct node * link;
};
typedef struct node stack;


typedef struct hero
{
	short x;
	short y;
}HERO , *PHERO;

stack * get_node()
{
	stack * tmp;

	tmp = (stack *)malloc(sizeof(stack)); 
	tmp->link = EMPTY;

	return tmp;
}

void push(stack ** top, short x, short y)
{
	stack * tmp;

	tmp = *top;
	*top = get_node();
	(*top)->x = x;
	(*top)->y = y;
	(*top)->link = tmp;
}

HERO pop(stack ** top)
{
	stack * tmp;
	HERO num;
	tmp = *top;
	
	if(*top == EMPTY)
	{
		printf("Stack is empty!!!!\n");
		exit(1);//	return NULL;
	}
	
	num.x = tmp->x;
	num.y = tmp->y;
	*top = (*top)->link;
	
	free(tmp);
	return num;
}



void gotoxy(int x, int y)
{
	COORD Cur = {x,y};
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE),Cur);
}

void print_MAP(int MAP[10][10], HERO hr)
{
	int i,j;
	gotoxy(0,0);
	for(i=0;i<10;i++)
	{
		for(j=0;j<10;j++)
		{
			if(MAP[i][j] == 0)
			{
				printf("■");
			}else if(MAP[i][j] == 1)
			{
				printf("□");
			}else if(MAP[i][j] == 2)
			{
				printf("＊");
			}
		}
		printf("\n");
	}
	gotoxy(hr.x,hr.y);
	printf("☆");
}


int main()
{
	HERO hr;
	stack * top = EMPTY;
	HERO output;

	int MAP[10][10] = 
	{
		{0,1,0,0,0,0,0,0,0,0},
		{0,1,1,0,0,1,1,1,0,0},
		{0,0,1,0,1,1,0,1,0,0},
		{0,0,1,1,1,0,0,1,0,0},
		{0,0,0,0,0,0,0,1,1,1},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0},
	};
	hr.x = 2;
	hr.y = 0;
	print_MAP(MAP,hr);

	
	while(1)
	{
		
		if(MAP[hr.y][(hr.x/2)-1] == 1)
		{
			MAP[hr.y][(hr.x/2)] = 2;
			hr.x -= 2;
		}else if(MAP[hr.y][(hr.x/2)+1] == 1)
		{
			MAP[hr.y][(hr.x/2)] = 2;
			hr.x += 2;
		}else if(MAP[hr.y+1][(hr.x/2)] == 1)
		{
			MAP[hr.y][(hr.x/2)] = 2;
			hr.y += 1;
		}else if(MAP[hr.y-1][(hr.x/2)] == 1)
		{
			MAP[hr.y][(hr.x/2)] = 2;
			hr.y -= 1;
		}else
			break;

		push(&top , hr.x , hr.y);


		print_MAP(MAP,hr);
		Sleep(300);
	}	
	int x = 30;
	int y = 0;

	while(1){

	gotoxy(x,y);
	output = pop(&top);
	printf(" %hd / %hd ", output.x , output.y);
	y++;

	}

	return 0;
}
