/*
1. 함수

정의 자체는 독립적인 기능을 가지는 작은 프로그램이다.

개발의 기간을 많이 단축시킬 수 있다는 장점이 있다.

물론 쓰지 않아도 무방하다.

int main(int argc, char * argv[])
{     }

제일 헤깔렸던 부분이다. 흔히는 argument라고 부르고,

가변인수라고 부르기도 한다.

메인의 시작부터 인자값을 받는 것이고 argc에는 인자의 개수가

argv에는 인자의 문자열이 저장된다.

main이라고 하는 것은 가장 우선적으로 소스에서 실행되는 함수이다.

처리순서

전처리기 -> 메인함수 -> 메인함수 내 정의 함수


함수의 형태는 다음과 같다

출력값의자료형   함수명  (전달인자)
{
수행내용
}

괄호 안의 전달인자는 함수 내의 수행 내용에 필요한 변수를

전달인자를 통해 함수 내부로 전달해준다.

출력값이라는 것은 수행내용에서 return x;라는 형태로 표현되는데

함수 수행후에 출력값이 함수 자리에 남는다.

가령 ret = SumFunc(n); 이라는 구문에서

SsumFunc(c) 실행 후 리턴된 값이 55라면

ret = 55; 와 같은 형태가 된다고 생각하면 쉽다.

*/



#include <stdio.h>

float avrg(int x,int y);
void show_avrg(int a,int b,float f);

void main()
      {
       int i,j;
       float f;
       i = 2;
       j = 3;
       f = avrg(i,j);
       show_avrg(i,j,f);

      }

float avrg(int j, int k)
       {
             int total;
             float f;
             total = j+k;
             f = total/2.0f;
             return f;
       }

void show_avrg(int a, int b, float f)
{
             printf("\n%d와 %d의 평균",a,b);
             printf("값은 %3.1f입니다.\n",f);
}

/*
함수 정의를 main보다 아래에 했다면 메인함수 위에 

한번 더 정의를 해줘야한다.
*/

#include <stdio.h>


char big(int x,int y)
{
 if(x>y)return 'Y';
 else if(x<y) return 'N';
 else return '=';

}

void main()
{
 int a = 100,b = 200;
 char size = big(a,b);

 if(size == 'Y')
  printf("\n %d는(은) %d보다 크다.\n",a,b);
 if(size == 'N')
  printf("\n %d는(은) %d보다 작다.\n",a,b);
 if(size == '-')
  printf("\n %d는(은) %d과(와) 같다.\n",a,b);

}

/*
3. 함수 예제3

-----------------------------------------------
※ 추후 공부를 위한 추가지식

하드디스크 ram 캐시 레지스터 순으로

mmu라는 것이 하드디스크 공간을 가상으로 

맵핑을 시켜 정열된 모습으로 인식.

STACK, HEAP, Data, Code/Text 구역으로 나뉨
(virtual memory)

Stack 이라는 것은 지역변수가 저장되고 

함수에 관련된 정보들이 저장

매개변수라고 하는 argument

함수를 실행시키고 다시 main으로 돌아올 때 다시 

메인함수의 돌아올 위치를 Stack에 저장

5개월 차에 화면에 띄워 볼 기회가 있다.

메모리 내에 함수만의 영역(flame?)을 가진다.
---------------------------------------------------------


Stack에서 함수 호출시 매개변수를 전달하기 위해서는

main에서 저장된 변수 저장 이외에

한번 더 저장을 한다. 따라서 함수 내에서 변수를

사용하기 때문에 main 안에서의 변수는

변하지 않는다.
*/

#include <stdio.h>

func(int a, int b)
{
     a+=5;
     b*=10;
     printf("a = %d, b = %d\n",a,b);
}


void main()
{
     int a = 5, b = 10;
     func(a,b);
     printf("a = %d, b = %d\n",a,b);
}

/*
함수 내에서 변화된 a,b 값은 main의 a,b 값에 영향을 미치지 못한다.

이것을 call-by-value 라고 부른다.

이것과 다르게 주소값을 변환하는 함수는

call-by-reference 라고 한다.
*/
