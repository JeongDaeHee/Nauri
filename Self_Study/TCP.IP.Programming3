bind 함수

ip 주소와 포트 번호를 결정해준다.

int bind(SOCKET s,
                struct sockaddr * name,
                int namelen
                )

첫 번째 인자값은 접속을 허용할 소켓 구조체를 넣어줘야 한다.

두 번째 인자값은 IP/PORT 주소를 담은 소켓 구조체 이다.

세 번째 인자값은 소켓 주소를 담은 구조체의 길이를 넣어줘야 한다.

함수 성공시 0을 리턴하고 실패시에 SOCKET_ERROR 을 리턴한다.


listen()

Server에 준비하는 함수이다.

int listen(SOCKET s,
              int backlog
              )

첫 번째는 소켓 구조체를 넣어주고

두 번째 인수는 접속 가능한 클라이언트 개수를 지정해서 넣어준다.

두 번째 인수에서 최대값을 표현해주기위해 SOMAXONN이라는 변수를쓸것이다.

함수 성공시 0을 리턴하고, 실패시 SOCKET_ERROR을 리턴한다.


accept()

요청 대기 함수이다.

SOCKET accept( SOCKET s,
                      struct sockaddr * addr,
                      int * addrlen
                 )

첫 번째 인자는 listening 상태로 만들 소켓을 넣어준다.

두 번째 인자는 클라이언트의 IP/Port 번호를 저장할 구조체를 넣어준다.

세 번째 인자는 두 번째 인자의 크기를 넣어주면 된다.

함수 성공시 새로운 소켓을 리턴하고, 실패시 INVAILD_SOCKET를 리턴한다.

recv()

도착한 데이터를 수신하기 위에 수신 버퍼에 받는 함수

int secv(SOCKET s,
           char * buf,
           int len, int flags
          )

첫 번째 인자는 상대방과 연결된 소켓을 넣어준다.

두 번째는 상대방에게서 받은 데이터를 저장할 버퍼 주소를 넣어준다.

세 번째는 두 번째 인자값에 대한 길이를 넣어주고

네 번째에는 옵션값을 설정하는 변수이다.

성공 시 받은 바이트 수를 리턴한다. 실패시 INVAILD_SOCKET를 리턴한다.


send 함수

상대방에게 데이터를 전송하고자 할 때 쓰는 함수

int send( SOCKET s,
             char * buf,
             int len, int flags
           )

첫 번째 인자는 상대방과 연결된 소켓을 넣어준다.

두 번째는 상대방에게서 보낼 데이터를 저장할 버퍼 주소를 넣어준다.

세 번째는 두 번째 인자값에 대한 길이를 넣어주고

네 번째에는 옵션값을 설정하는 변수이다.

성공 시 보낸 바이트 수를 리턴한다. 실패시 INVAILD_SOCKET를 리턴한다.



소켓 관련 함수(클라이언트)


connet 함수

서버 쪽으로 접속을 요청하는 함수.

int connect(SOCKET s,
                             struct sockaddr * name,
                             int namelen
                )

첫 번째 인자는 서버와 통신 할 소켓을 입력해준다.

두 번째 인자는 연결할 서버의 IP/Port 정보를 담은 구조체인다.

세 번째 인자는 두 번째 인자의 길이를 입력해준다.

함수 성공시 0을 리턴하고, 실패 시에는 SOCKET_ERROR 을 리턴한다.

send 함수


서버와 동일하다.

recv 함수


서버와 동일하다.
