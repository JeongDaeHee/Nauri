1. file 열기


file 오픈 성공시에 파일 이름형태의 포인터 값으로 return이 된다.

FILE *fopen(대상 파일의 이름, 파일개방 모드)

와 같이 선언한다.

파일 모드의 경우에는 세가지가 있다.

"r" = 읽기 모드, 파일이 없을 경우 에러로 NULL반환

"w" = 쓰기 모드, 파일이 없을 경우 새로운 파일 생성

"a" = 겹처쓰기 모드, 파일의 끝에 새롭게 이어 써주는 모드.

"r+" = 읽기와 쓰기 모드

"w+" = 읽기와 쓰기 모드, 현재 내용을 파기하고 읽기 쓰기모드

"a+" = 겹처쓰기 모드, 끝에 이어써주면서 읽기 쓰기모드.

2. file 닫기


int fclose(파일의 이름);

3. file 출력

fputc(출력하고자 하는 문자, 파일의 이름) 

파일의 한글자를 출력하고 싶을 때 함수 사용

서식화 출력

fprintf(파일의 이름, 배열의 이름)

배열에 이름에는 "넣고자 하는 문구"나 배열을 사용해 배열에 입력할 수 있다.

fwrite(내가 출력할 대상, 이동할 바이트 수, 이동 반복횟수, 파일 이름)

많은 내용이 있을 때 사용하는 함수이다

대상에 저장된 문자열을 바이트 수씩 반복하여 파일에 넣어주겠다는 의미

fputs(출력하고자 하는 대상, 파일의 이름)

저장된 대상을 파일에 써주겠다라는 의미

4. FILE 입력

fgetc(파일 위치정보);

파일에 있는 문자 한개를 읽어오겠다.

서식화 입력

fscanf(파일의 위치정보, "제어문자",배열명) 

파일에 저장된 값을 얻어온다는 의미. 파일에 저장된 값을

"%s"로 가져와서 배열명이 가르키는 곳에 저장시키겠다.

블록 입력

fread(저장할 공간(배열명),한번에 가져올 바이트 수, 반복할 횟수, 파일의 위치정보);

많은 데이터가 저장되어 있을 때, 값을 얻어오는 방법.

현재 파일의 위치정보에 바이트 수만큼 반복해 배열명에 저장해주겠다는 의미

fgets(빈 배열주소, 가져올 바이트 수, 파일의 위치정보)

파일에 저장된 문자열을 가져오겠다는 의미.

현재 파일에 저장된 값 중 10바이트만큼 값을 fp의 공간에 저장시키겠다.

fseek(파일의 위치정보, 커서 이동 횟수, 커서를 이동시킬 위치정보)

파일의 커서 위치를 이동시킨다.

ftell(파일의 위치정보)

파일의 위치정보를 얻어온다.

feof(파일의 위치정보)

파일의 끝을 알려준다.


파일의 예제 1


#include <stdio.h>

int main()
{
   FILE * fp;
   fp = fopen("c:\\test.txt","w");    //test.txt 파일 생성, 쓰기 설정
   fprintf(fp,"%s","hi");                  //test.txt에 hi를 입력
   fclose(fp);                              // 종료

  return 0;

}

다음 예제는 간단한 파일 작성의 예제이다.

파일 구조체를 가르키는 포인터변수 fp를 설정한 후에

fp를 c드라이브에 있는 test.txt 파일을 "쓰기모드"로 열어준다

후에 hi라는 문자열을 파일에 써주고, fp를 닫아준다.

Quiz 1

#include <stdio.h>

나의 답안

int main()
{
   FILE * fp;
   fopen("c:\\test.txt","w");

   fprintf(fp,"%s","이름 : 홍길동");
   fprintf(fp,"%s","나이 : 16");
   fprintf(fp,"%s","주소 : 산골짜기");

   fclose(fp)

  return 0;

}

실제 답안

int main()
{
   FILE * fp;
   fopen("c:\\test.txt","w");

   fprintf(fp,"이름 : 홍길동\n나이 : 16\n주소 : 산골짜기\n");

   fclose(fp)

  return 0;

}

파일의 예제 2


#include <stdio.h>
int main(int argc, char ** argv){
             FILE *fp;
             int i, no = 0, sum = 0;
             if((fp = fopen("c:\\test\\data.txt","r")) == NULL)
{
                           printf("File open error ... \n");
                           return -1;}
             while(fscanf(fp,"%d",&i)!=EOF){
                      sum += i;
                      ++no;}
              if(no == 0)
                   printf("NO data\n");
}

위의 예제는 c드라이브 test에 있는 data.txt라는 파일을

읽기모드로 읽어드릴 때, 파일이 없을 경우 에러 창을 띄워준다.

파일이 NULL값이 아닐경우 파일에 있는 fp에서 숫자를 읽어와

sum에 값을 더해준다. 값을 하나 읽을 때마다 no값을 1씩 증가시켜준다.

결과적으로 no의 값이 0일경우는 데이터가 하나도 없다는 뜻이기 때문에

NO data라는 문장을 화면에 띄워준다.

sum에는 data.txt에 있는 숫자들을 모두 더한 값이 있을 것이다.

(계속)
