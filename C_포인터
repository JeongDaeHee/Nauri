/*
포인터


포인터 변수 선언 방법은

자료형 * 포인터변수명;

*는 포인터 연산자이다.
*/


//포인터 이해를 위한 간단한 예제 1

#include <stdio.h>

void main()
{
 int a;
 int *pa;

 pa = &a;

 *pa = 10; // a= 10;

 printf("%d \n", *pa); //printf("%d \n",a);


}

/*
결국 *pa 는 a의 주소를 가리키기 때문에 a를 printf() 한다.

포인터 연산자 없이 pa에만 저장할 경우에는 a의 주소값

즉, &a를 넣어줘야 *pa를 출력했을 때 a의 값을 볼 수 있다.
*/

//포인터 이해를 위한 간단한 예제 2

#include <stdio.h>

void main()
{
 char ch1 = 'A', ch2;

 char *ptr1, *ptr2;

 ptr1 = &ch1; ptr2 = &ch2;

 *ptr2 = *ptr1;

 printf("ch1 = %c, ch2 = %c \n",*ptr1,*ptr2);
}

/*
각 변수를 가르키는 포인터를 선언할 경우에는 가르키는 변수에

맞는 포인터 자료형을 선언해 준다.

가령, 예제 2의 char 변수를 가르키는 포인터를 만들기 위해서는

char형 포인터를 선언해 주어야 하는 것이다.

예제 1과 같이 주소값을 넣을 때에는 포인터 연산자를 뺀

포인터 변수 자체에만 넣어 주어야 한다.
*/

//포인터 이해를 위한 간단한 예제 3

#include <stdio.h>

void main()
{
 
 int num1 = 10, num2;
 int *ptr;

 ptr = &num1;
 num1++;
 num2 = 5;
 ptr = &num2;
 *ptr = *ptr + num1 + num2;

 printf("num1 = %d, num2 = %d, *ptr = %d\n",num1,num2,*ptr);

}

/*
위 예제는 ptr을 num2를 가리키는 포인터로 설정해 놓았기 때문에

ptr값에 다시 더해서 넣어주면 *ptr의 값과 num2의 값이 동시에 변하게 된다.

따라서 num2 또한 21의 값을 가지고 *ptr도 21의 값을 가진다.

*/

//포인터 이해를 위한 간단한 예제 4

#include <stdio.h>

void main()
{
 int p = 123;
 int *pn;

 pn = &p;

 printf("pn+1 = %d \n", pn+1);
 printf("pn+2 = %d \n", pn+2);
 printf("pn+3 = %d \n", pn+3);
}

/*
위의 연산은 pn이라는 포인터 변수에 값을 더해주게 되면

주소값이 증가하기 때문에 실제 변수의 값은 증가하지 않는다.

주소값은 변수의 자료형만큼 증가한다.

위의 예에서 자료형은 int이기 때문에 주소값 1마다 4바이트가 증가한다.

char 형 변수일 경우는 주소값 1마다 char의 바이트 값인 1만큼 증가한다.
*/

//포인터 이해를 위한 간단한 예제 5

#include <stdio.h>

void main()
{
 char a = 'A';
 float b = 12.345;
 char *pa;
 float *pb;
 pa = &a;
 pb = &b;

 printf("문자형 변수의 크기 : %d\n",sizeof(a));
 printf("실수형 변수의 크기 : %d\n",sizeof(b));
 printf("포인트 문자형 변수의 크기 : %d\n",sizeof(pa));
 printf("포인트 실수형 변수의 크기 : %d\n",sizeof(pb));

}

/*
위의 예는 포인터 변수의 바이트 값을 알아내기 위한 예제이다.

위를 실행해보면 포인터 변수의 가르키는 변수에 상관없이

4바이트의 크기를 가진다는 것을 알 수 있다.
*/


//포인터 이해를 위한 간단한 예제 6

#include <stdio.h>

void main()
{
 
 int *ptr;
 *ptr = 10;
 printf("%d\n",*ptr);
 
}

/*
위의 예제는 포인터 변수에 주소값을 넣지 않고 직접적으로

값을 넣었을 때 오류가 나는 것을 확인할 수 있다.
*/


//포인터 이해를 위한 간단한 예제 7

#include <stdio.h>

void main()
{
 int i = 5, j = 10;
 int *p = &i, int *q = &j;

 printf("(1) i = %d, j = %d\n",i,j);
 printf("(2) &i = %d, &j = %d\n",&i,&j);
 printf("(3) p = %d, q = %d\n",p,q);
 printf("(4) *p = %d, *q = %d\n",*p,*q);
 printf("(5) p == &i = %d \n",p==&i);
 
}

//위의 예제는 주소값의 개념과 포인터의 개념을 비교해 볼 수 있는 예제이다.

/*
주소값은 메모리상의 위치를 나타내고 포인터의 변수명만 입력할 경우 역시

주소값을 return한다. 포인터 연산자를 입력할 경우는 가르키는 변수의 값을

리턴하는 것을 볼 수 있다. (5)에서는 p와 i의 주소값은 같다는 연산을 통해

참이기 때문에 1을 리턴하는 것을 볼 수 있다.
*/

//포인터 이해를 위한 간단한 예제 8

#include <stdio.h>

void main()
{
 char vc = 'A',*pc;

 pc = &vc;

 printf("\n pc -1 = %u번지 pc = %u번지 pc+1 = %u번지",pc-1,pc,pc+1);
 printf("\n");
 
}

/*

char형 변수는 1을 증가시킬 때 마다 char형 변수의 크기만큼인 1바이트씩

주소값이 증가하는 것을 알 수 있다.


int형 변수의 경우 포인터의 주소값에 1씩 증가시켰을 경우  포인터 변수의 자료형인

4바이트씩 증가하는 것을 확인할 수 있다.
*/








